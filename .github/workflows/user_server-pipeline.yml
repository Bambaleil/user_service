name: CI Pipeline

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      id: setup-python
      with:
        python-version: 3.10

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: false
        virtualenvs-in-project: true

    - name: Cache venv
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        python -m venv venv
        source venv/bin/activate
        pip install pylint flake8 bandit pytest pytest-cov
        poetry install --no-root

    - name: Run Tests
      run: |
        source venv/bin/activate
        pytest

    - name: Verify code style (Black)
      if: ${{ inputs.ENFORCE_BLACK }}
      uses: psf/black@stable
      with:
        options: "--verbose --check"

    - name: Enforce code style (Flake8)
      if: ${{ inputs.ENFORCE_FLAKE8 }}
      run: |
        source venv/bin/activate
        flake8 . --exclude ./venv

    - name: Lint code
      if: ${{ inputs.ENFORCE_PYLINT }}
      run: |
        source venv/bin/activate
        pylint **/*.py

    - name: Code security check
      if: ${{ inputs.ENFORCE_BANDIT }}
      run: |
        source venv/bin/activate
        bandit -r . --exclude ./venv,./tests

    - name: Send report to CodeClimate
      if: ${{ inputs.ENABLE_CODE_CLIMATE }}
      uses: paambaati/codeclimate-action@v3.0.0
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      with:
        coverageLocations: |
          ${{ github.workspace }}/coverage.xml:coverage.py

    - name: SonarCloud scanner
      if: ${{ inputs.ENABLE_SONAR }}
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        registry: docker.io
        username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
        password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

    - name: Generate Docker metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: docker.io/${{ inputs.CONTAINER_REPOSITORY }}
        tags: |
          type=semver,pattern={{version}}
          type=sha

    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=docker.io/${{ inputs.CONTAINER_REPOSITORY }}:latest
        cache-to: type=inline

    - name: Analyze image efficiency (Dive)
      if: ${{ inputs.ENFORCE_DIVE }}
      uses: MartinHeinz/dive-action@v0.1.3
      with:
        image: docker.io/${{ inputs.CONTAINER_REPOSITORY }}:${{ steps.meta.outputs.version }}
        config: sarif
        exit-zero: false

    - name: Run Trivy scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: docker.io/${{ inputs.CONTAINER_REPOSITORY }}:${{ steps.meta.outputs.version }}
        format: sarif
        output: trivy-results.sarif

    - name: Push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=registry,ref=docker.io/${{ inputs.CONTAINER_REPOSITORY }}:latest
        cache-to: type=inline

    - name: Install cosign
      uses: sigstore/cosign-installer@main

    - name: Sign Docker image
      run: |
        cosign sign --yes docker.io/${{ inputs.CONTAINER_REPOSITORY }}@${{ steps.meta.outputs.digest }}
      env:
        COSIGN_EXPERIMENTAL: "true"

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: trivy-results.sarif

    - name: Prepare Slack message
      if: ${{ always() && inputs.ENABLE_SLACK }}
      run:
