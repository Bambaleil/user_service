name: CI Pipeline

on:
  push:
    branches:
      - master
    inputs:

      PYTHON_VERSION:
        required: false
        type: string
        default: "3.10"

      ENABLE_SONAR:
        required: false
        type: boolean
        default: false

      ENABLE_CODE_CLIMATE:
        required: false
        type: boolean
        default: false

      ENABLE_SLACK:
        required: false
        type: boolean
        default: false

      ENFORCE_PYLINT:
        required: false
        type: boolean
        default: true

      ENFORCE_BLACK:
        required: false
        type: boolean
        default: true

      ENFORCE_FLAKE8:
        required: false
        type: boolean
        default: true

      ENFORCE_DIVE:
        required: false
        type: boolean
        default: true

      ENFORCE_BANDIT:
        required: false
        type: boolean
        default: true

      # ______________________________

      DIVE_CONFIG:
        required: false
        type: string
        default: ""

      # ______________________________

      CONTAINER_REGISTRY:
        required: true
        type: string
        default: "docker.io"

      CONTAINER_REPOSITORY:
        required: true
        type: string
        default: "fakusima/user_service"

    # ______________________________

    secrets:
      CONTAINER_REGISTRY_USERNAME:
        description: 'Username for container registry'
        required: true
      CONTAINER_REGISTRY_PASSWORD:
        description: 'Password for container registry'
        required: true
      SONAR_TOKEN:
        description: 'SonarCloud project token'
        required: true
      CC_TEST_REPORTER_ID:
        description: 'CodeClimate Test Reported ID'
        required: true
      SLACK_WEBHOOK:
        description: 'Slack webhook URL'
        required: true

    # ______________________________


jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        id: setup-python
        with:
          python-version: "3.10" # ${{ inputs.PYTHON_VERSION }}

      - name: Get cache metadata
        id: cache-meta
        run: |
          CACHE_KEY="venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}"
          CACHE_PATH="./venv"
          echo "cache-key=${CACHE_KEY}" >> $GITHUB_OUTPUT
          echo "cache-path=${CACHE_PATH}" >> $GITHUB_OUTPUT

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false
          virtualenvs-in-project: true
          virtualenvs-path: ${{ steps.cache-meta.outputs.cache-path }}

      - name: Load cached venv
        id: cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache-meta.outputs.cache-path }}
          key: ${{ steps.cache-meta.outputs.cache-key }}

      - name: Install cosign
        uses: sigstore/cosign-installer@main

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m venv venv
          source venv/bin/activate
          pip install pylint flake8 bandit pytest pytest-cov
          poetry install --no-root

      - name: Run Tests
        run: |
          source venv/bin/activate
          pytest

      - name: Verify code style (Black)
        uses: psf/black@stable
        with:
          options: "--verbose ${{ inputs.ENFORCE_BLACK && '--check' || '' }}"

      - name: Enforce code style (Flake8)
        run: |
          source venv/bin/activate
          flake8 . --exclude ./venv ${{ inputs.ENFORCE_FLAKE8 && '' || '--exit-zero' }}

      - name: Lint code
        run: |
          source venv/bin/activate
          pylint **/*.py --exit-zero

      - name: Code security check
        run: |
          source venv/bin/activate
          bandit -r . --exclude ./venv,./tests

      - name: Send report to CodeClimate
        uses: paambaati/codeclimate-action@v3.0.0
        if: ${{ inputs.ENABLE_CODE_CLIMATE }}
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageLocations: |
            ${{github.workspace}}/coverage.xml:coverage.py

      - name: SonarCloud scanner
        uses: sonarsource/sonarcloud-github-action@master
        if: ${{ inputs.ENABLE_SONAR }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Get repository accesses
        id: get-repo # REPO="${{ inputs.CONTAINER_REPOSITORY }}"
        run: |
          REPO="fakusima/user_service"
          USERNAME="${{ secrets.CONTAINER_REGISTRY_USERNAME }}"
          PASSWORD="${{ secrets.CONTAINER_REGISTRY_PASSWORD }}"
          echo "repo=${REPO}" >> $GITHUB_OUTPUT
          echo "username=${USERNAME}" >> $GITHUB_OUTPUT
          echo "password=${PASSWORD}" >> $GITHUB_OUTPUT


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: "docker.io" # ${{ inputs.CONTAINER_REGISTRY }}
          username: ${{ steps.get-repo.outputs.username }}
          password: ${{ steps.get-repo.outputs.password }}

      - name: Generate tags and image meta
        id: meta
        uses: docker/metadata-action@v3
        with: #  ${{ inputs.CONTAINER_REGISTRY }}/${{ steps.get-repo.outputs.repo }}
          images: |
            docker.io/fakusima/user_service
          tags: |
            type=ref,event=tag
            type=sha

      - name: Build image
        uses: docker/build-push-action@v2
        with:
          context: .
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ inputs.CONTAINER_REGISTRY }}/${{ steps.get-repo.outputs.repo }}:latest
          cache-to: type=registry,ref=${{ inputs.CONTAINER_REGISTRY }}/${{ steps.get-repo.outputs.repo }}:latest,mode=max

      - name: Analyze image efficiency
        uses: MartinHeinz/dive-action@v0.1.3
        with:
          image: 'docker.io/fakusima/user_service:${{ steps.meta.outputs.version }}' # '${{ inputs.CONTAINER_REGISTRY }}/${{ steps.get-repo.outputs.repo }}:${{ steps.meta.outputs.version }}'
          config: 'sarif' # ${{ inputs.DIVE_CONFIG }}
          exit-zero: false # ${{ !inputs.ENFORCE_DIVE }}

      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/fakusima/user_service:${{ steps.meta.outputs.version }}' # '${{ inputs.CONTAINER_REGISTRY }}/${{ steps.get-repo.outputs.repo }}:${{ steps.meta.outputs.version }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Push container image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=registry,ref=docker.io/fakusima/user_service:latest # type=registry,ref=${{ inputs.CONTAINER_REGISTRY }}/${{ steps.get-repo.outputs.repo }}:latest
          cache-to: type=registry,ref=docker.io/fakusima/user_service:latest,mode=max # type=registry,ref=${{ inputs.CONTAINER_REGISTRY }}/${{ steps.get-repo.outputs.repo }}:latest,mode=max

      - name: Sign the published Docker image
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: cosign sign docker.io/fakusima/user_service:${{ steps.meta.outputs.version }} # cosign sign ${{ inputs.CONTAINER_REGISTRY }}/${{ steps.get-repo.outputs.repo }}:${{ steps.meta.outputs.version }}

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Prepare content for Slack notification
        if: ${{ always() && inputs.ENABLE_SLACK }}
        id: gen-slack-messages
        run: |
          TITLE=""
          if [ "${{ job.status }}" = "success" ]; then
            TITLE="Job Success"
          elif [ "${{ job.status }}" = "failure" ]; then
            TITLE="Job Failed"
          else
            TITLE="Job Cancelled"
          fi
          echo "::set-output name=message::$MESSAGE"
          echo "::set-output name=title::$TITLE"

      - name: Slack notification
        uses: rtCamp/action-slack-notify@v2
        if: ${{ always() && inputs.ENABLE_SLACK }}
        env:
          SLACK_CHANNEL: general
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/${{ github.actor }}.png?size=48
          SLACK_TITLE: ${{ steps.gen-slack-messages.outputs.title }}
          SLACK_USERNAME: ${{ github.actor }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}