name: CI Pipeline

on:
  workflow_dispatch:
    inputs:

      PYTHON_VERSION:
        description: ''
        required: false
        type: string
        default: "3.10"

      ENFORCE_BLACK:
        description: ''
        required: false
        type: boolean
        default: true

      ENFORCE_FLAKE8:
        description: ''
        required: false
        type: boolean
        default: true

      ENFORCE_DIVE:
        description: ''
        required: false
        type: boolean
        default: true

      # ______________________________

      DIVE_CONFIG:
        description: ''
        required: false
        type: string
        default: ''

      # ______________________________

      CONTAINER_REGISTRY:
        description: 'Container registry URL'
        required: true
        type: string
        default: 'ghcr.io'
      CONTAINER_REPOSITORY:
        description: 'Container repository (e.g. fakusima/user_service)'
        required: true
        type: string
        default: "fakusima/user_service"
#
#    # ______________________________
#
#    secrets:
#      CONTAINER_REGISTRY_USERNAME:
#        description: 'Username for container registry'
#        required: true
#      CONTAINER_REGISTRY_PASSWORD:
#        description: 'Password for container registry'
#        required: true
#      SONAR_PROJECT_KEY:
#        description: 'SonarCloud project key'
#        required: true
#      SONAR_ORGANIZATON_KEY:
#        description: 'SonarCloud organization key'
#        required: true
#      SONAR_TOKEN:
#        description: 'SonarCloud project token'
#        required: true
#      CC_TEST_REPORTER_ID:
#        description: 'CodeClimate Test Reported ID'
#        required: true
#      SLACK_WEBHOOK:
#        description: 'Slack webhook URL'
#        required: true
#
#    # ______________________________


jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: ${{ inputs.PYTHON_VERSION }}

      - name: Get cache metadata
        id: cache-meta
        run: |
          CACHE_KEY="venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}"
          CACHE_PATH="./venv"
          echo "cache-key=${CACHE_KEY}" >> $GITHUB_OUTPUT
          echo "cache-path=${CACHE_PATH}" >> $GITHUB_OUTPUT

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false
          virtualenvs-in-project: true
          virtualenvs-path: ${{ steps.cache-meta.outputs.cache-path }}

      - name: Load cached venv
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.cache-meta.outputs.cache-path }}
          key: ${{ steps.cache-meta.outputs.cache-key }}

      - name: Install cosign
        uses: sigstore/cosign-installer@main

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m venv venv
          source venv/bin/activate
          pip install pylint flake8 bandit pytest pytest-cov
          poetry install --no-root

#      - name: Run Tests
#        run: |
#          source venv/bin/activate
#          pytest
#
#      - name: Verify code style (Black)
#        uses: psf/black@stable
#        with:
#          options: "--verbose ${{ inputs.ENFORCE_BLACK && '--check' || '' }}"
#
#      - name: Enforce code style (Flake8)
#        run: |
#          source venv/bin/activate
#          flake8 . --exclude ./venv ${{ inputs.ENFORCE_FLAKE8 && '' || '--exit-zero' }}
#
#      - name: Lint code
#        run: |
#          source venv/bin/activate
#          pylint **/*.py --exit-zero
#
#      - name: Code security check
#        run: |
#          source venv/bin/activate
#          bandit -r . --exclude ./venv,./tests
#
#      - name: Send report to CodeClimate
#        uses: paambaati/codeclimate-action@v9.0.0
#        env:
#          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
#        with:
#          coverageLocations: |
#            ${{github.workspace}}/coverage.xml:coverage.py
#
#      - name: SonarCloud scanner
#        uses: sonarsource/sonarqube-scan-action@v5.0.0
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        with:
#          args: >
#            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
#            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATON_KEY }}
#            -Dsonar.host.url=https://sonarcloud.io
#            -Dsonar.exclusions=**/venv/**

      - name: Get repository accesses
        id: get-repo
        run: |
          REPO=""
          USERNAME=""
          PASSWORD=""
          if [ ${{ inputs.CONTAINER_REGISTRY }} = 'ghcr.io' ]; then
            REPO=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
            USERNAME=${{ github.actor }}
            PASSWORD=${{ secrets.GITHUB_TOKEN }}
          else
            REPO=${{ inputs.CONTAINER_REPOSITORY }}
            USERNAME=${{ secrets.CONTAINER_REGISTRY_USERNAME }}
            PASSWORD=${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
          fi
  
          echo "::set-output name=repo::$REPO"
          echo "::set-output name=username::$USERNAME"
          echo "::set-output name=password::$PASSWORD"


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ inputs.CONTAINER_REGISTRY }}
          username: ${{ steps.get-repo.outputs.username }}
          password: ${{ steps.get-repo.outputs.password }}

      - name: Generate tags and image meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ${{ inputs.CONTAINER_REGISTRY }}/${{ steps.get-repo.outputs.repo }}
          tags: |
            type=ref,event=tag
            type=sha

      - name: Build image
        uses: docker/build-push-action@v2
        with:
          context: .
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ inputs.CONTAINER_REGISTRY }}/${{ steps.get-repo.outputs.repo }}:latest
          cache-to: type=registry,ref=${{ inputs.CONTAINER_REGISTRY }}/${{ steps.get-repo.outputs.repo }}:latest,mode=max

#      - name: Extract image digest
#        id: digest
#        run: |
#          # Проверяем, что образ доступен в реестре
#          docker pull ${{ inputs.CONTAINER_REGISTRY }}/${{ steps.get-repo.outputs.repo }}:${{ steps.meta.outputs.version }}
#          # Извлекаем диджест
#          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' docker.io/fakusima/user_service:${{ steps.meta.outputs.version }} | cut -d'@' -f2)
#          echo "DIGEST=${DIGEST}" >> $GITHUB_OUTPUT

      - name: Analyze local Docker image with Dive
        run: |
          docker images
          docker info
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            wagoodman/dive:latest \
            ${{ inputs.CONTAINER_REGISTRY }}/${{ steps.get-repo.outputs.repo }}:${{ steps.meta.outputs.version }}
#      - name: Analyze image efficiency
#        uses: MartinHeinz/dive-action@v0.1.3
#        with:
#          image: '${{ inputs.CONTAINER_REGISTRY }}/${{ steps.get-repo.outputs.repo }}:${{ steps.meta.outputs.version }}'
#          config: ${{ inputs.DIVE_CONFIG }}
#          exit-zero: ${{ !inputs.ENFORCE_DIVE }}

#      - name: Trivy vulnerability scan
#        uses: aquasecurity/trivy-action@master
#        with:
#          image-ref: 'docker.io/fakusima/user_service:${{ steps.meta.outputs.version }}'
#          format: 'sarif'
#          output: 'trivy-results.sarif'
#
#      - name: Push container image
#        uses: docker/build-push-action@v6
#        with:
#          context: .
#          push: true
#          tags: ${{ steps.meta.outputs.tags }}
#          cache-from: type=registry,ref=docker.io/fakusima/user_service:latest
#          cache-to: type=registry,ref=docker.io/fakusima/user_service:latest,mode=max
#
#      - name: Sign the published Docker image
#        env:
#          COSIGN_EXPERIMENTAL: "true"
#        run: cosign sign --yes docker.io/fakusima/user_service@${{ steps.digest.outputs.DIGEST }}
#
#      - name: Upload Trivy scan results to GitHub Security tab
#        uses: github/codeql-action/upload-sarif@v3
#        with:
#          sarif_file: 'trivy-results.sarif'
#
#      - name: Prepare content for Slack notification
#        id: gen-slack-messages
#        run: |
#          TITLE=""
#          if [ "${{ job.status }}" = "success" ]; then
#            TITLE="Job Success"
#          elif [ "${{ job.status }}" = "failure" ]; then
#            TITLE="Job Failed"
#          else
#            TITLE="Job Cancelled"
#          fi
#          echo "message=Job status: ${{ job.status }}" >> $GITHUB_OUTPUT
#          echo "title=$TITLE" >> $GITHUB_OUTPUT
#
#      - name: Slack notification
#        uses: rtCamp/action-slack-notify@v2
#        env:
#          SLACK_CHANNEL: userservice
#          SLACK_COLOR: ${{ job.status }}
#          SLACK_ICON: https://github.com/${{ github.actor }}.png?size=48
#          SLACK_TITLE: ${{ steps.gen-slack-messages.outputs.title }}
#          SLACK_USERNAME: ${{ github.actor }}
#          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}